Enabling Web app development support when creating a project or module
============================================================================
Do one of the following:
        If you are going to create a new project: click Create New Project on the Welcome screen or select File | New | Project.

        As a result, the New Project wizard opens.
        If you are going to add a module to an existing project: open the project you want to add a module to, and select File | New | Module.

        As a result, the New Module wizard opens.
    On the first page of the wizard, in the left-hand pane, select Java. In the right-hand part of the page, specify the JDK that you are going to use.
    Under Additional Libraries and Frameworks, select the Web Application check box.

    Select the version of the Servlet specification to be supported from the Versions list.

    If you want the deployment descriptor web.xml file to be created, select the Create web.xml check box.

    Click Next.
    Specify the name and location settings. For more information, see Project Name and Location or Module Name and Location.

    Click Finish.


How to create a war file
====================================

1) Menu: File > Project Structure > Artifacts
2) Click the green + icon and create a "Web Application: Archive", then OK
3) Menu: Build > Build Artifacts ... > Web: war

By default it should generate it under your <project>/out/artifacts/web_war.war

After You generate the war file copy the path and paste it in webapps folder under tomcat and run the following command

1) jar xvf SpringWebApp.war
and then put the files in "SpringWebApp" folder



How to start the tomcat server
=====================================
-   cd apache-tomcat-8.0.24/bin
-   ./startup.sh
-   ./shutdown.sh


To debug the application using tomcat
====================================================
-   cd bin
-   ./catalina.sh jpda start
-   ps waux | grep tomcat
-   come back to intellij , set the debug point in the program
-   go to run , edit configurations , default , remote and then name the remote server and give the port number and set it 8000
            - for running jvm:
            agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000
            - for running jdk1.4:
            -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000
and click ok
-   then debug the application , open the url in the browser and see how your application is debugged and hoe does the control flow happens.
-   ./shutdown.sh


reference methods
=======================
/*
    @RequestMapping(value = "/country", method = RequestMethod.GET)
    public ModelAndView country() {
        return new ModelAndView("country", "command", new Country());
    }

    @RequestMapping(value = "/getCountry", method = RequestMethod.GET)
    public String getCountry(@ModelAttribute("SpringWebApp") Country country,
                             ModelMap model) {
        model.addAttribute("name", country.getName());
        return "result";
    }
    */


main
===========

package com.webapp;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.List;

public class MainApp {

        public static void main(String[] args) {
            ApplicationContext context =
                    new ClassPathXmlApplicationContext("beans.xml");

            CountryJDBCTemplate countryJDBCTemplate = (CountryJDBCTemplate)context.getBean("CountryJDBCTemplate");

            System.out.println("------Records Creation--------" );
            countryJDBCTemplate.create("India");
            countryJDBCTemplate.create("USA");
            countryJDBCTemplate.create("ENGLAND");

            System.out.println("------Listing Multiple Records--------" );
            List<Country> countries = countryJDBCTemplate.listCountries();
            for (Country record : countries) {
                System.out.print(", Name : " + record.getName());
            }
            System.out.println("----Listing Record -----");
            Country country = countryJDBCTemplate.getCountry();
            System.out.print(", Name : " + country.getName());

            System.out.println("----Deleting Record with name = India -------");
            countryJDBCTemplate.delete("India");
            System.out.print("deleted");


        }
    }

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd ">

    <!-- Initialization for data source -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:postgresql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value="password"/>
    </bean>

    <!-- Definition for studentJDBCTemplate bean -->
    <bean id="countryJDBCTemplate"
          class="com.webapp.CountryJDBCTemplate">
        <property name="dataSource"  ref="dataSource" />
    </bean>

</beans>


  @RequestMapping(value = "/addCountry", method = RequestMethod.POST)
//    public String addCountry(@ModelAttribute("SpringWeb") Country country,
//                             ModelMap model) {
//        model.addAttribute("name", country.getName());
//
//        return "Successful";
//    }